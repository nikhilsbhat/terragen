// Package gen is the core of terragen, where the template generation happens.
package gen

import (
	"fmt"
	"html/template"
	"io"
	"os"
	"os/exec"
	"path"
	"path/filepath"

	"github.com/nikhilsbhat/neuron/cli/ui"
	"github.com/nikhilsbhat/terragen/decode"
	"github.com/spf13/cobra"
)

//GenInput holds the required values to generate the templates
type GenInput struct {
	// The name of the terraform provider you need to start of with.
	Package string
	// List of all the dependent packages for terraform, if not passed it picks default.
	Dependents []string
	// Path defines where the templates has to be generated.
	Path     string
	writer   io.Writer
	template string
}

var mainTemp = `package main

import (
	{{- range $index, $element := .Dependents }}
	"{{- $element }}"
	{{- end }}
)

func main() {
	plugin.Serve(&plugin.ServeOpts{
		ProviderFunc: {{ .Package }}.Provider})
}`

var providerTemp = `package {{ .Package }}

import (
	"github.com/hashicorp/terraform/helper/schema"
	"github.com/hashicorp/terraform/terraform"
)

// Provider returns a terraform.ResourceProvider.
func Provider() terraform.ResourceProvider {
	return &schema.Provider{
		Schema: map[string]*schema.Schema{
		},
	}
}
`

// Generate generates the basic folder/files templates to build terraform custom provider.
func (i *GenInput) Generate(cmd *cobra.Command, args []string) {

	i.Path = i.getPath()
	i.template = fmt.Sprintf("terraform-provider-%s", i.Package)

	if i.Dependents == nil {
		i.Dependents = []string{fmt.Sprintf("%s/%s", i.template, i.Package), "github.com/hashicorp/terraform/plugin"}
	}

	// Generating the base terraform provider folder ex: terraform-provider-demo
	fmt.Println(ui.Info(fmt.Sprintf("\nTemplates will be generated under %s\n", i.Path)))
	if err := i.genTerraDir(); err != nil {
		fmt.Println(ui.Error(decode.GetStringOfMessage(err)))
		os.Exit(1)
	}

	// Generating the required files
	fmt.Println(ui.Info("Generating the required files\n"))
	if err := i.genTerraFiles("main.go", i.Path); err != nil {
		fmt.Println(ui.Error(decode.GetStringOfMessage(err)))
		os.Exit(1)
	}
	// Generating the required files
	if err := i.genTerraFiles("provider.go", fmt.Sprintf("%s/%s", i.Path, i.Package)); err != nil {
		fmt.Println(ui.Error(decode.GetStringOfMessage(err)))
		os.Exit(1)
	}

	// Setup the project to make it ready for developable
	fmt.Println(ui.Info("terragen is in the process of making provider creator's life easy\n"))
	if err := i.setupTerragen(); err != nil {
		fmt.Println(ui.Error(decode.GetStringOfMessage(err)))
		os.Exit(1)
	}
	fmt.Println(ui.Info("life of provider creator is less complicated now ...!!\nStart enhancing the code from the templates generated by terragen\n"))
}

func (i *GenInput) getPath() string {
	if i.Path == "." {
		dir, err := os.Getwd()
		if err != nil {
			fmt.Println(ui.Error(decode.GetStringOfMessage(err)))
			os.Exit(1)
		}
		return dir
	}
	return path.Dir(i.Path)
}

func (i *GenInput) genTerraDir() error {
	pathTgen := filepath.Join(i.Path, i.template)
	if _, direrr := os.Stat(pathTgen); os.IsNotExist(direrr) {
		fmt.Println(ui.Info(fmt.Sprintf("template %s does not exists, generating one for you\n", i.template)))
		err := os.MkdirAll(path.Join(pathTgen, i.Package), 0777)
		if err != nil {
			return err
		}
		i.Path = pathTgen
		return nil
	}
	return fmt.Errorf(ui.Error(fmt.Sprintf("Looks like template %s was created earlier in the location %s\n", i.template, i.Path)))
}

func (i *GenInput) genTerraFiles(name, path string) error {
	file, err := os.Create(filepath.Join(path, name))
	if err != nil {
		return err
	}

	var tmpl *template.Template
	switch name {
	case "main.go":
		tmpl = template.Must(template.New(name).Parse(mainTemp))
	case "provider.go":
		tmpl = template.Must(template.New(name).Parse(providerTemp))
	}

	tmpl.Execute(file, i)
	file.Close()
	return nil
}

func (i *GenInput) setupTerragen() error {
	goInit := exec.Command("go", "mod", "init", i.template)
	goInit.Dir = i.Path
	if err := goInit.Run(); err != nil {
		return err
	}

	goVnd := exec.Command("go", "mod", "vendor")
	goVnd.Dir = i.Path
	if err := goVnd.Run(); err != nil {
		return err
	}
	return nil
}
