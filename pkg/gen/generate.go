// Package gen is the core of terragen, where the template generation happens.
package gen

import (
	"fmt"
	"log"

	"github.com/nikhilsbhat/neuron/cli/ui"
	"github.com/spf13/cobra"
)

type Terragen interface {
	Create() error
	Scaffolded() bool
	Update() error
	Get(currentProvider []byte) ([]byte, error)
	GetUpdated() error
}

type Scaffold interface {
	Generate(cmd *cobra.Command, args []string)
}

// Input holds the required values to generate the templates
type Input struct {
	// Resource to be created while generating scaffolds,
	// by passing a resource name here, it auto enabled ResourceRequired.
	// Provider name would be appended while constructing final resource name.
	// EX: resource 'create_cluster' for provider demo would become 'demo_create_cluster'.
	Resource []string
	// ResourceRequired determines if resource to be created while generating scaffolds.
	// Enabling this wth no resource name is not accepted.
	ResourceRequired bool
	// DataSource to be created while generating scaffolds,
	// by passing a resource name here, it auto enabled DatasourceRequired.
	// Provider name would be appended while constructing final data_source name.
	// EX: resource 'load_image' for provider demo would become 'demo_load_image'.
	DataSource []string
	// DatasourceRequired determines if data_source to be created while generating scaffolds.
	// Enabling this wth no data_source name is not accepted.
	DatasourceRequired bool
	// Importer to be created while generating scaffolds,
	// by passing a resource name here, it auto enabled ImporterRequired.
	Importer string
	// ImporterRequired determines if importer to be created while generating scaffolds.
	// Enabling this wth no importer name is not accepted.
	ImporterRequired bool
	// Provider name of which the scaffolds to be created, defaults to terraform-provider-demo
	Provider string
	// List of all the dependent packages for terraform, if not passed it picks default.
	Dependents []string
	// Path defines where the templates has to be generated.
	Path string
	// TemplateRaw consists of go-templates which are the core for terragen.
	TemplateRaw TerraTemplate
	// AutoGenMessage will be configured by terragen and cannot be overwritten.
	AutoGenMessage string
	// Description to be added to resource/datasource
	Description string
	// DryRun simulates scaffold creation by not creating one
	DryRun bool
	// RepoGroup is used while creating go mod. Defaults to 'github.com/test/'
	// For a given provider, repo group would be appended.
	// Ex: For provider 'demo' the go mod would looks 'github.com/test/demo'
	RepoGroup string
	// Force will forcefully scaffold the datasource/resource by not validating the terragen version.
	// Enabling this might tamper the scaffolds
	Force bool
	// SkipValidation will skip validating all the prerequisites such as checking go,goimports etc.
	SkipValidation bool
	mod            string
	metaDataPath   string
}

// TerraTemplate are the collections of go-templates which are used to generate terraform provider's base template.
type TerraTemplate struct {
	// ProviderTemp holds the template for provider
	ProviderTemp string `json:"provider-template" yaml:"provider-template"`
	// RootTemp holds the template for root file
	RootTemp string `json:"root-template" yaml:"provider-template"`
	// DataTemp holds the template for data
	DataTemp string `json:"data-template" yaml:"data-template"`
	// ResourceTemp holds the template for resource
	ResourceTemp string `json:"resource-template" yaml:"resource-template"`
	// GitIgnore that where scaffolded.
	GitIgnore string `json:"gitignore" yaml:"gitignore"`
}

var autoGenMessage = `// ----------------------------------------------------------------------------
//
//     ***     TERRAGEN GENERATED CODE    ***    TERRAGEN GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file was auto generated by Terragen.
//     This autogenerated code has to be enhanced further to make it fully working terraform-provider.
//
//     Get more information on how terragen works.
//     https://github.com/nikhilsbhat/terragen
//
// ----------------------------------------------------------------------------`

func init() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)
}

func (i *Input) Generate(cmd *cobra.Command, args []string) {
	i.setInputs()
	i.Provider = args[0]
	i.mod = i.setMod()

	if !i.SkipValidation {
		if !validatePrerequisite() {
			log.Fatal(ui.Error("system validate failed, please install prerequisites to scaffold terraform provider"))
		}
	}

	if i.Dependents == nil {
		i.Dependents = []string{fmt.Sprintf("%s/%s", i.mod, i.Provider), "github.com/hashicorp/terraform-plugin-sdk/v2/plugin"}
	}

	log.Println(ui.Info(fmt.Sprintf("go module for scaffold would be: %s", i.mod)))
	if NewProvider(i).Scaffolded() {
		log.Fatal(ui.Error(fmt.Sprintf("scaffolds for provider '%s' was already generated\n\t use"+
			" `terragen create -h` or `terragen edit -h` for more info", i.Provider)))
	}

	log.Println(ui.Info(fmt.Sprintf("scaffolds for provider '%s' would be generated under: '%s'", i.Provider, i.Path)))

	log.Println(ui.Info("terragen is in the process of making life simpler"))

	if !i.DryRun {
		if err := i.genTerraDir(); err != nil {
			log.Fatal(ui.Error(fmt.Sprintf("generating directories for scaffolds under %s failed with error: %v", i.Provider, err)))
		}
	}

	if err := NewProvider(i).Create(); err != nil {
		log.Fatal(ui.Error(err.Error()))
	}

	if err := NewMain(i).Create(); err != nil {
		log.Fatal(ui.Error(fmt.Sprintf("oops generating main.go scaffolds for provider %s failed with error: %v", i.Provider, err)))
	}

	if i.ResourceRequired {
		if err := NewResource(i).Create(); err != nil {
			log.Fatal(ui.Error(err.Error()))
		}
	}

	if i.DatasourceRequired {
		if err := NewDataSource(i).Create(); err != nil {
			log.Fatal(ui.Error(err.Error()))
		}
	}

	if err := NewMake(i).Create(); err != nil {
		log.Fatal(ui.Error(err.Error()))
	}

	if err := NewGit(i).Create(); err != nil {
		log.Fatalf(ui.Error(err.Error()))
	}

	if !i.DryRun {
		if err := i.setupTerragen(); err != nil {
			log.Fatal(ui.Error(err.Error()))
		}
	}

	if err := i.CreateOrUpdateMetadata(); err != nil {
		log.Fatalf(ui.Error(fmt.Sprintf("oops creating/updating metadata errored out with %v", err)))
	}

	log.Println(ui.Info("life is less complicated now ...!!"))
	log.Println(ui.Info(fmt.Sprintf("start enhancing terraform provider %s from the scaffold generated by terragen", i.Provider)))
}

func (i *Input) setInputs() {
	i.setRequires()
	i.getTemplate()
	i.enrichNames()
	i.Path = i.getPath()
	i.AutoGenMessage = autoGenMessage
}
